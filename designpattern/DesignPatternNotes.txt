
Notes:

1. Design pattern are the best practices and provides a solution to recurring problems.

2. 3 types of design patterns:
    a. Creational design pattern: Deals with object creation and instantiation.
    b. Structural design pattern: Deals with relationship between classes.
    c. Behavioural design pattern: Deals with communication between classes.

3. JEE design catalog contains 4 layers: 
    a. Data access layer(CRUD Service)
    b. Service/business logic layer
    c. Presentation layer.
    d. Integration layer.

4. Singleton Class: Only one instance of object is created EG=> Logger

5. Steps for singleton:
    a. Make constructor optional.
    b. Make private static instance.
    c. Make static method to return constructor object.
    d. Take care of serialization.
    e. Serialization: ..................................
    f. Ensure objects are not cloneable as it will create another instance.
    g. Reflection Class problem => You can access the constructors and can create new instance. Solution is using Enum class.

6. Eager Initialization, Lazy initialization: Eager initialization is when the object is instantiated in the very first time whuile declaration.
                                              Lazy initialization is when it is initialized only when required.
                                        
7. Factory Pattern: Hides object creation process.

8. Factory class is responsible for returning type of object. The method will be static.

9. Abstract Factory: Factory of factories, decides which factory to be choosed/created.

10. Template Pattern:  Parent provides a template for the child classes.

11. Adapter Pattern: Used to communicate between two classes. 
    Adapter class is responsible for conversion of data required to communicate between both classes.

12. Flyweight pattern: Used to save memory, it is structural design pattern. Can reduce number of object creation. We cache
    the object created.

13. Steps for flyweight:

    a. Find out extrensic state(non common properties)

    b. Pass those states/prop as parametrs.

    c. Create a factory class.

14. Command Pattern: Comes under behavioral pattern. The command passes object from invoker to receiver. There are 5 components:
        a. Client
        b. Invoker
        c. Command
        d. Concrete Command(implements command)
        e. Receiver(knows how to perform all actions)

        Eg: Person => Remote => On/Off command => Television

    Client and receiver are decoupled.

15. Decorator pattern: Adds functionality to object at runtime. Example in Java => new BufferedReader(new FileReader(..)).

16. Dependency Injection: When object if another class is required for the implementation of a class(HAS-A).

17. IOC pattern: Inversion Of Control: Giving external container the responsibility of dependency inject/ or creation of object.
         Eg. Spring Container.

18. @Component annotation is required to tell spring that class should be created at runtime using @Autowired

19. Ways of DI:
        a. Field level
        b. Using setters
        c. Constructor based injection

20: In Presentation layer of JEE, there are 3 designs:
        a. Interceptor filter(performing filtering before it reaches request provider)
        b. Front Contoller(Controls business logic and view navigation from duplicating, else it becomes combursome. First 
                           request comes to front controller, which first invokes business logic and then decides view)
        c. MVC: Model, View, Controller. Model does db connection and business logic. View is the way model is visible to user. 
                Controller acts as a conection between model and view. It first checks model for request and then 
                selects appropriate view. Adv: Parallel dev, Maintenance is easy.

21. DAO Pattern: The actions to perform on every db should be present inside a separate DAO class. 
                 Create DAO interface and Impl class to separate code for actions on database(@Repository).
                 DAOs can be used by other layers like presentation layer/business logic layer.
                 DAO contains the database methods.

22. Proxy pattern: Proxy servers present in between layers, gives the feel of original server.

23. Remote proxy: Exists between a client system and server lying on some other system. It comuunicates with the remote server and
                  and brings back reaponse.

24. Virtual proxy design pattern: The virtual proxy design pattern is used to preserve memory from being allotted to an object
                         that may not be used in the future. Until the object is not used, a light copy of the object (that contains the required details) is created and shown to the user.

25. Security proxy: Takes care of the authentication and authorization.

26. Prototype pattern: Creates object from existing object. Avoid loading of entire data again while creation of new object.

27. Shallow copy vs Deep copy: In shallow copy we don't override the clone method, so any change or update done to obj1 is also visible to obj2.
                    In deep copy we either override or copy cosntructor to avoid pointing to same object after cloning.

28. Builder pattern: Gives flexibilty to return object by only specifying required data. It contains a static builder inner class. 

29. Iterator pattern is applicable in case of collection of objects. 